# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ssacbotpoc
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
  region: eu-west-1

  # resourcePolicy:
  #   - Effect: Allow
  #     Principal: 
  #       Service: lex.amazonaws.com
  #     Action: lambda:invokeFunction
  #     Resource:
  #       - !GetAtt CreateServiceLambdaFunction.Arn

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createService:
    handler: handler.hello

resources:
 Resources:
  #  SSaCBotResource:
  #    Type: Custom::SSaCBot
  #    DependsOn:
  #      - SSaCIntentResource
  #    Properties:
  #      ServiceToken: !ImportValue SsacBotCustomResourceFunction
  #      BotName: SSaCBot
  #      BotDescription: A Bot that creates and updates services including source control, build, test and deployment according to your standards!
  #  SSaCIntentResource:
  #    Type: Custom::SSaCBotIntent
  #    DependsOn:
  #       - SSaCSlotTypeResource
  #       - SSaCSlotTypeServiceNameResource
  #    Properties:
  #      ServiceToken: !ImportValue SsacIntentCustomResourceFunction
  #      IntentName: CreateService
  #      IntentDescription: Intent to create new services!
  #      IntentFullfillmentLambdaArn: !GetAtt CreateServiceLambdaFunction.Arn
  #  SSaCSlotTypeResource:
  #    Type: Custom::SSaCSlotTypeIntent
  #    Properties:
  #      ServiceToken: !ImportValue SsacSlotTypeCustomResourceFunction
  #      SlotTypeName: RuntimeVTwo
  #      SlotTypeDescription: Available runtimes
  #      SlotTypeValueSelectionStrategy: TOP_RESOLUTION
  #      SlotTypeEnumerationValues:
  #       - value: python
  #         synonyms: 
  #           - py
  #       - value: dotnet
  #         synonyms: 
  #           - .net
  #           - .net core
  #           - c#
  #       - value: nodejs
  #         synonyms: 
  #           - node
  #           - javascript
  #           - js
  #       - value: typescript
  #         synonyms: 
  #           - ts
  #           - tscript
   SSaCSlotTypeServiceNameResource:
     Type: Custom::SSaCSlotTypeIntent
     Properties:
       ServiceToken: !ImportValue SsacSlotTypeCustomResourceFunction
       SlotTypeName: ServiceNameRegExVTwo
       SlotTypeDescription: What should the service be called?
       SlotTypeValueSelectionStrategy: ORIGINAL_VALUE
       SlotTypeParentSlotTypeSignature: AMAZON.AlphaNumeric
       SlotTypeConfigurations:
          - regexConfiguration: 
              pattern: '[A-Za-z0-9]{1,30}'
      
       
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
